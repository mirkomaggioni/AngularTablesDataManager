{"version":3,"sources":["Services/GridService.ts"],"names":[],"mappings":"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","file":"GridService.js","sourcesContent":["/// <reference path=\"../models/grid.ts\" />\r\n/// <reference path=\"metadataservice.ts\" />\r\n/// <reference path=\"../../scripts/typings/angularjs/angular-resource.d.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n    import models = AngularTablesDataManagerApp.Models;\r\n    import services = AngularTablesDataManagerApp.Services;\r\n\r\n    export abstract class GridService {\r\n        public entitySet: string;\r\n        public entityName: string;\r\n        public metadataService: services.MetadataService;\r\n\r\n        public constructor(entitySet: string, entityName: string, metadataService: services.MetadataService) {\r\n            this.entitySet = entitySet;\r\n            this.entityName = entityName;\r\n            this.metadataService = metadataService;\r\n        }\r\n\r\n        public getMetadata(columns: Array<string>): ng.IPromise<Array<models.MetadataProperty>> {\r\n            return this.metadataService.getMetadata(this.entitySet, columns);\r\n        }\r\n\r\n        public getData(Columns: Array<models.MetadataProperty>, Datas: Array<models.IEntity>): Array<models.Row> {\r\n            var gridData: Array<models.Row> = new Array<models.Row>();\r\n            var rowData: Array<models.RowProperty>;\r\n\r\n            for (var i = 0; i < Datas.length; i++) {\r\n                var entity: models.IEntity = Datas[i];\r\n                rowData = new Array<models.RowProperty>();\r\n\r\n                for (var a = 0; a < Columns.length; a++) {\r\n                    rowData.push(new models.RowProperty(Columns[a].Name, (<any>entity)[Columns[a].Name], Columns[a].Nullable));\r\n                }\r\n\r\n                gridData.push(new models.Row(entity, this.entityName, rowData));\r\n            }\r\n\r\n            return gridData;\r\n        }\r\n\r\n        public createData(Columns: Array<models.MetadataProperty>, Entity: models.IEntity) {\r\n            var datas: Array<models.RowProperty> = new Array<models.RowProperty>();\r\n            var item: models.Row = new models.Row(Entity, 'City', datas);\r\n\r\n            for (var a = 0; a < Columns.length; a++) {\r\n                datas.push(new models.RowProperty(Columns[a].Name, '', Columns[a].Nullable));\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        public saveData(item: models.Row): models.IEntity {\r\n            for (var i = 0; i < item.Properties.length; i++) {\r\n                (<any>item.Entity)[item.Properties[i].Name] = item.Properties[i].Value;\r\n            }\r\n\r\n            return <models.IEntity>item.Entity;\r\n        }\r\n\r\n        public abstract getGridData(Columns: Array<models.MetadataProperty>): ng.IPromise<Array<models.Row>>;\r\n        public abstract createGridData(Columns: Array<models.MetadataProperty>): models.Row;\r\n        public abstract saveGridData(item: models.Row): ng.IPromise<models.Row>;\r\n        public abstract deleteGridData(item: models.Row): ng.IPromise<models.Row>;\r\n    }\r\n}\r\n"]}