{"version":3,"sources":["Services/CitiesService.ts"],"names":[],"mappings":"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","file":"CitiesService.js","sourcesContent":["/// <reference path=\"../app.ts\" />\r\n/// <reference path=\"../commons.ts\" />\r\n/// <reference path=\"../models/cities.ts\" />\r\n/// <reference path=\"../models/services.ts\" />\r\n/// <reference path=\"metadataservice.ts\" />\r\n/// <reference path=\"../../scripts/typings/angularjs/angular-resource.d.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n\r\n    const entityName: string = 'Cities';\r\n    import ngr = ng.resource;\r\n    import commons = AngularTablesDataManagerApp.Commons;\r\n    import models = AngularTablesDataManagerApp.Models;\r\n    import services = AngularTablesDataManagerApp.Services;\r\n\r\n    export interface ICitiesResourceClass extends ngr.IResourceClass<ngr.IResource<models.ICity>> {\r\n        create(order: models.ICity): ngr.IResource<models.ICity>;\r\n    }\r\n\r\n    export class CitiesService implements models.IService {\r\n        private resource: ICitiesResourceClass;\r\n        private $q: ng.IQService;\r\n        private metadataService: services.MetadataService;\r\n\r\n        constructor($resource: ngr.IResourceService, $q: ng.IQService, MetadataService: services.MetadataService) {\r\n            this.$q = $q;\r\n            this.metadataService = MetadataService;\r\n\r\n            this.resource = <ICitiesResourceClass>$resource('/odata/' + entityName + '/:id', { id: '@Id' }, {\r\n                get: { method: \"GET\" },\r\n                create: { method: \"POST\" },\r\n                save: { method: \"PUT\" },\r\n                query: { method: \"GET\", isArray: false },\r\n                delete: { method: \"DELETE\" }\r\n            });\r\n        }\r\n\r\n        public create(order: models.ICity) {\r\n            return this.resource.create(order);\r\n        }\r\n\r\n        public save(order: models.ICity) {\r\n            if (order.Id == commons.Constants.GuidEmpty) {\r\n                return this.resource.create(order);\r\n            }\r\n            else {\r\n                return this.resource.save(order);\r\n            }\r\n        }\r\n\r\n        public delete(order: models.ICity) {\r\n            return this.resource.remove(order);\r\n        }\r\n\r\n        public getAll() {\r\n            var datas: ngr.IResourceArray<ngr.IResource<models.ICity>> \r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.resource.query().$promise.then((data: any) => {\r\n                datas = data[\"value\"];\r\n\r\n                return defer.resolve(datas);\r\n            }, (error) => {\r\n                return defer.reject(datas);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public getMetadata(): ng.IPromise<Array<models.MetadataProperty>> {\r\n            return this.metadataService.getMetadata(entityName);\r\n        }\r\n\r\n        static factory() {\r\n            return (r: ngr.IResourceService, $q: ng.IQService, MetadataService: services.MetadataService) => new CitiesService(r, $q, MetadataService);\r\n        }\r\n    }\r\n\r\n    AngularTablesDataManager.module.factory('CitiesService', ['$resource', '$q', 'MetadataService', CitiesService.factory()]);\r\n}\r\n"]}