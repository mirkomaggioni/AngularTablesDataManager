{"version":3,"sources":["Services/CitiesService.ts"],"names":[],"mappings":"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","file":"CitiesService.js","sourcesContent":["/// <reference path=\"../app.ts\" />\r\n/// <reference path=\"../commons.ts\" />\r\n/// <reference path=\"../models/cities.ts\" />\r\n/// <reference path=\"../models/services.ts\" />\r\n/// <reference path=\"metadataservice.ts\" />\r\n/// <reference path=\"../../scripts/typings/angularjs/angular-resource.d.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n    import ngr = ng.resource;\r\n    import commons = AngularTablesDataManagerApp.Commons;\r\n    import models = AngularTablesDataManagerApp.Models;\r\n    import services = AngularTablesDataManagerApp.Services;\r\n\r\n    export interface ICitiesResourceClass extends ngr.IResourceClass<ngr.IResource<models.ICity>> {\r\n        create(city: models.ICity): ngr.IResource<models.ICity>;\r\n    }\r\n\r\n    export class CitiesService implements models.IService {\r\n        private entitySet: string = 'Cities';\r\n        private entityName: string = 'City';\r\n        private resource: ICitiesResourceClass;\r\n        private $q: ng.IQService;\r\n        private metadataService: services.MetadataService;\r\n\r\n        constructor($resource: ngr.IResourceService, $q: ng.IQService, MetadataService: services.MetadataService) {\r\n            this.$q = $q;\r\n            this.metadataService = MetadataService;\r\n\r\n            this.resource = <ICitiesResourceClass>$resource('/odata/' + this.entitySet + \"(guid':key')\", { key: '@Id' }, {\r\n                get: { method: 'GET' },\r\n                create: { method: 'POST', isArray: false, url: '/odata/' + this.entitySet  },\r\n                save: { method: 'PUT' },\r\n                query: { method: 'GET', isArray: false, url: '/odata/' + this.entitySet },\r\n                delete: { method: 'DELETE' }\r\n            });\r\n        }\r\n\r\n        public create(city: models.ICity) {\r\n            return this.resource.create(city);\r\n        }\r\n\r\n        public save(city: models.ICity) {\r\n            if (city.Id == commons.Constants.GuidEmpty) {\r\n                return this.resource.create(city);\r\n            }\r\n            else {\r\n                return this.resource.save(city);\r\n            }\r\n        }\r\n\r\n        public delete(city: models.ICity) {\r\n            return this.resource.delete({ key: city.Id });\r\n        }\r\n\r\n        public getAll() {\r\n            var datas: ngr.IResourceArray<ngr.IResource<models.ICity>>;\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.resource.query().$promise.then((data: any) => {\r\n                datas = data[\"value\"];\r\n\r\n                return defer.resolve(datas);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public getMetadata(columns: Array<string>): ng.IPromise<Array<models.MetadataProperty>> {\r\n            return this.metadataService.getMetadata(this.entitySet, columns);\r\n        }\r\n\r\n        public getGridData(Columns: Array<models.MetadataProperty>): ng.IPromise<Array<models.Row>> {\r\n            var gridData: Array<models.Row> = new Array<models.Row>();\r\n            var rowData: Array<models.RowProperty>;\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.getAll().then((data) => {\r\n                for (var i = 0; i < data.length; i++) {\r\n                    var city: models.ICity = data[i];\r\n                    rowData = new Array<models.RowProperty>();\r\n\r\n                    for (var a = 0; a < Columns.length; a++) {\r\n                        rowData.push(new models.RowProperty(Columns[a].Name, (<any>city)[Columns[a].Name], Columns[a].Nullable));\r\n                    }\r\n\r\n                    gridData.push(new models.Row(city, this.entityName, rowData));\r\n                }\r\n\r\n                return defer.resolve(gridData);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public createGridData(Columns: Array<models.MetadataProperty>) {\r\n            var entity: models.ICity = { Id: commons.Constants.GuidEmpty, Name: '' };\r\n            var datas: Array<models.RowProperty> = new Array<models.RowProperty>();\r\n            //datas.push({ Name: 'Name', Value: '', Nullable: false });\r\n            var item: models.Row = new models.Row(entity, 'City', datas);\r\n\r\n            for (var a = 0; a < Columns.length; a++) {\r\n                datas.push(new models.RowProperty(Columns[a].Name, '', Columns[a].Nullable));\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        public saveGridData(item: models.Row) {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            for (var i = 0; i < item.Properties.length; i++) {\r\n                (<any>item.Entity)[item.Properties[i].Name] = item.Properties[i].Value;\r\n            }\r\n\r\n            this.save(<models.ICity>item.Entity).$promise.then((data: any) => {\r\n                item.Entity = data;\r\n                return defer.resolve(item);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public deleteGridData(item: models.Row) {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.delete(<models.ICity>item.Entity).$promise.then((data: any) => {\r\n                return defer.resolve(item);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        static factory() {\r\n            return (r: ngr.IResourceService, $q: ng.IQService, MetadataService: services.MetadataService) => new CitiesService(r, $q, MetadataService);\r\n        }\r\n    }\r\n\r\n    AngularTablesDataManager.module.factory('CitiesService', ['$resource', '$q', 'MetadataService', CitiesService.factory()]);\r\n}\r\n"]}