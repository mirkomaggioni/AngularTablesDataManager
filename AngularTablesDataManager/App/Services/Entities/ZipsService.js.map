{"version":3,"sources":["Services/Entities/ZipsService.ts"],"names":[],"mappings":"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","file":"ZipsService.js","sourcesContent":["/// <reference path=\"../../app.ts\" />\r\n/// <reference path=\"../../commons.ts\" />\r\n/// <reference path=\"../../models/zips.ts\" />\r\n/// <reference path=\"../../models/services.ts\" />\r\n/// <reference path=\"../gridservice.ts\" />\r\n/// <reference path=\"../../../scripts/typings/angularjs/angular-resource.d.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n    import ngr = ng.resource;\r\n    import commons = AngularTablesDataManagerApp.Commons;\r\n    import models = AngularTablesDataManagerApp.Models;\r\n    import services = AngularTablesDataManagerApp.Services;\r\n\r\n    export interface IZipsResourceClass extends ngr.IResourceClass<ngr.IResource<models.IZip>> {\r\n        create(zip: models.IZip): ngr.IResource<models.IZip>;\r\n        getAll(): Array<models.IZip>;\r\n    }\r\n\r\n    export class ZipsService extends services.GridService {\r\n        private resource: IZipsResourceClass;\r\n        private $q: ng.IQService;\r\n\r\n        constructor($resource: ngr.IResourceService, $q: ng.IQService, metadataService: services.MetadataService) {\r\n            super('Zips', 'Zip', metadataService);\r\n\r\n            this.$q = $q;\r\n            this.metadataService = metadataService;\r\n\r\n            this.resource = <IZipsResourceClass>$resource('/odata/' + this.entitySet + \"(guid':key')\", { key: '@Id' }, {\r\n                get: { method: 'GET' },\r\n                create: { method: 'POST', isArray: false, url: '/odata/' + this.entitySet },\r\n                save: { method: 'PUT' },\r\n                query: { method: 'GET', isArray: false, url: '/odata/' + this.entitySet },\r\n                delete: { method: 'DELETE' }\r\n            });\r\n        }\r\n\r\n        public create(zip: models.IZip) {\r\n            return this.resource.create(zip);\r\n        }\r\n\r\n        public save(zip: models.IZip) {\r\n            if (zip.Id == commons.Constants.GuidEmpty) {\r\n                return this.resource.create(zip);\r\n            }\r\n            else {\r\n                return this.resource.save(zip);\r\n            }\r\n        }\r\n\r\n        public delete(zip: models.IZip) {\r\n            return this.resource.delete({ key: zip.Id });\r\n        }\r\n\r\n        public getAll() {\r\n            var defer: ng.IDeferred<Array<models.IZip>> = this.$q.defer();\r\n\r\n            this.resource.query().$promise.then((data: any) => {\r\n                return defer.resolve(<Array<models.IZip>>data[\"value\"]);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public getGridData(Columns: Array<models.MetadataProperty>) {\r\n            var datas: Array<models.IZip>;\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.resource.query().$promise.then((data: any) => {\r\n                datas = data[\"value\"];\r\n\r\n                return defer.resolve(super.getData(Columns, <Array<models.IEntity>>datas));\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public createGridData(Columns: Array<models.MetadataProperty>) {\r\n            var entity: models.IZip = { Id: commons.Constants.GuidEmpty, Code: null };\r\n\r\n            return super.createData(Columns, entity);\r\n        }\r\n\r\n        public saveGridData(item: models.Row) {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.save(<models.IZip>super.saveData(item)).$promise.then((data: any) => {\r\n                item.Entity = data;\r\n                return defer.resolve(item);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        public deleteGridData(item: models.Row) {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            this.delete(<models.IZip>item.Entity).$promise.then((data: any) => {\r\n                return defer.resolve(item);\r\n            }, (error) => {\r\n                return defer.reject(error);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        static factory() {\r\n            return (r: ngr.IResourceService, $q: ng.IQService, MetadataService: services.MetadataService) => new ZipsService(r, $q, MetadataService);\r\n        }\r\n    }\r\n\r\n    AngularTablesDataManager.module.factory('ZipsService', ['$resource', '$q', 'MetadataService', ZipsService.factory()]);\r\n}\r\n"]}