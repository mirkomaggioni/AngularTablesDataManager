{"version":3,"sources":["Services/MetadataService.ts"],"names":[],"mappings":"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","file":"MetadataService.js","sourcesContent":["/// <reference path=\"../app.ts\" />\r\n/// <reference path=\"../models/grid.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n\r\n    import models = AngularTablesDataManagerApp.Models;\r\n\r\n    export class MetadataService {\r\n        private $http: ng.IHttpService;\r\n        private $q: ng.IQService;\r\n        private $filter: ng.IFilterService;\r\n\r\n        constructor($http: ng.IHttpService, $q: ng.IQService, $filter: ng.IFilterService) {\r\n            this.$http = $http;\r\n            this.$q = $q;\r\n            this.$filter = $filter;\r\n        }\r\n\r\n        public getMetadata(entityName: string, columns: Array<string>): ng.IPromise<Array<models.MetadataProperty>> {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            var req = {\r\n                method: 'GET',\r\n                url: '/odata/$metadata#' + entityName\r\n            };\r\n\r\n            var vm = this;\r\n            this.$http(req).then(function (result) {\r\n                var data: string = result.data.toString();\r\n                var xmlDoc: XMLDocument = $.parseXML(data);\r\n                var xml: JQuery = $(xmlDoc);\r\n                var properties: Array<models.MetadataProperty> = new Array<models.MetadataProperty>();\r\n\r\n                xml.find('EntityType').find('Property').each(function () {\r\n                    if (vm.$filter('filter')(columns, { $: $(this).attr('Name') }).length > 0) {\r\n                        var metadataProperty: models.MetadataProperty = new models.MetadataProperty();\r\n                        metadataProperty.Name = $(this).attr('Name');\r\n                        metadataProperty.Type = $(this).attr('Type');\r\n                        metadataProperty.Nullable = ($(this).attr('Nullable') != null) && ($(this).attr('Nullable').toLowerCase() == 'true');\r\n\r\n                        properties.push(metadataProperty);\r\n                    }                \r\n                });\r\n\r\n                return defer.resolve(properties);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        static factory() {\r\n            return ($http: ng.IHttpService, $q: ng.IQService, $filter: ng.IFilterService) => new MetadataService($http, $q, $filter);\r\n        }\r\n    }\r\n\r\n    AngularTablesDataManager.module.factory('MetadataService', ['$http', '$q', '$filter', MetadataService.factory()]);\r\n}"]}