{"version":3,"sources":["Services/MetadataService.ts"],"names":[],"mappings":"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","file":"MetadataService.js","sourcesContent":["/// <reference path=\"../app.ts\" />\r\n/// <reference path=\"../models/grid.ts\" />\r\n\r\nmodule AngularTablesDataManagerApp.Services {\r\n\r\n    import models = AngularTablesDataManagerApp.Models;\r\n\r\n    export class MetadataService {\r\n        private $http: ng.IHttpService;\r\n        private $q: ng.IQService;\r\n        private $filter: ng.IFilterService;\r\n\r\n        constructor($http: ng.IHttpService, $q: ng.IQService, $filter: ng.IFilterService) {\r\n            this.$http = $http;\r\n            this.$q = $q;\r\n            this.$filter = $filter;\r\n        }\r\n\r\n        public getMetadata(entityName: string, columns: Array<models.Column>): ng.IPromise<Array<models.MetadataProperty>> {\r\n            var defer: ng.IDeferred<any> = this.$q.defer();\r\n\r\n            var req = {\r\n                method: 'GET',\r\n                url: '/odata/$metadata'\r\n            };\r\n\r\n            var vm = this;\r\n            this.$http(req).then(function (result) {\r\n                var data: string = result.data.toString();\r\n                var xmlDoc: XMLDocument = $.parseXML(data);\r\n                var xml: JQuery = $(xmlDoc);\r\n                var properties: Array<models.MetadataProperty> = new Array<models.MetadataProperty>();\r\n\r\n                xml.find('EntityType[Name=\"'+ entityName +'\"]').find('Property').each(function () {\r\n                    if (vm.$filter('filter')(columns, { 'Name': $(this).attr('Name') }, true).length > 0) {\r\n                        var column: models.Column = vm.$filter('filter')(columns, { 'Name': $(this).attr('Name') }, true)[0];\r\n\r\n                        var metadataProperty: models.MetadataProperty = new models.MetadataProperty(\r\n                            $(this).attr('Name'),\r\n                            $(this).attr('Type'),\r\n                            ($(this).attr('Nullable') != null) && ($(this).attr('Nullable').toLowerCase() == 'true'),\r\n                            column.ShowedInGrid,\r\n                            column.ShowedInDetail);\r\n                        properties.push(metadataProperty);\r\n                    }                \r\n                });\r\n\r\n                return defer.resolve(properties);\r\n            });\r\n\r\n            return defer.promise;\r\n        }\r\n\r\n        static factory() {\r\n            return ($http: ng.IHttpService, $q: ng.IQService, $filter: ng.IFilterService) => new MetadataService($http, $q, $filter);\r\n        }\r\n    }\r\n\r\n    AngularTablesDataManager.module.factory('MetadataService', ['$http', '$q', '$filter', MetadataService.factory()]);\r\n}"]}